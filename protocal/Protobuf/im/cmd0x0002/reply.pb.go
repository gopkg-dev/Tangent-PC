// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: reply.proto

package cmd0x0002

import (
	fmt "fmt"
	github_com_golang_protobuf_proto "github.com/golang/protobuf/proto"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Reply struct {
	Targer               *ReplyReplyTarger `protobuf:"bytes,45,req,name=targer" json:"targer,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Reply) Reset()         { *m = Reply{} }
func (m *Reply) String() string { return proto.CompactTextString(m) }
func (*Reply) ProtoMessage()    {}
func (*Reply) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b35eee2ab8c5dd8, []int{0}
}
func (m *Reply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Reply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Reply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Reply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Reply.Merge(m, src)
}
func (m *Reply) XXX_Size() int {
	return m.Size()
}
func (m *Reply) XXX_DiscardUnknown() {
	xxx_messageInfo_Reply.DiscardUnknown(m)
}

var xxx_messageInfo_Reply proto.InternalMessageInfo

func (m *Reply) GetTarger() *ReplyReplyTarger {
	if m != nil {
		return m.Targer
	}
	return nil
}

type ReplyReplyTarger struct {
	MsgSeq               *uint32  `protobuf:"varint,1,req,name=MsgSeq" json:"MsgSeq,omitempty"`
	FromUin              *uint64  `protobuf:"varint,2,req,name=FromUin" json:"FromUin,omitempty"`
	SendTime             *uint64  `protobuf:"varint,3,req,name=SendTime" json:"SendTime,omitempty"`
	Tag4                 *uint32  `protobuf:"varint,4,opt,name=Tag4,def=1" json:"Tag4,omitempty"`
	ShowMsg              *ShowMsg `protobuf:"bytes,5,opt,name=ShowMsg" json:"ShowMsg,omitempty"`
	Tag6                 *uint64  `protobuf:"varint,6,opt,name=Tag6,def=1" json:"Tag6,omitempty"`
	GroupCode            *uint64  `protobuf:"varint,10,req,name=GroupCode" json:"GroupCode,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReplyReplyTarger) Reset()         { *m = ReplyReplyTarger{} }
func (m *ReplyReplyTarger) String() string { return proto.CompactTextString(m) }
func (*ReplyReplyTarger) ProtoMessage()    {}
func (*ReplyReplyTarger) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b35eee2ab8c5dd8, []int{0, 0}
}
func (m *ReplyReplyTarger) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplyReplyTarger) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReplyReplyTarger.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReplyReplyTarger) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplyReplyTarger.Merge(m, src)
}
func (m *ReplyReplyTarger) XXX_Size() int {
	return m.Size()
}
func (m *ReplyReplyTarger) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplyReplyTarger.DiscardUnknown(m)
}

var xxx_messageInfo_ReplyReplyTarger proto.InternalMessageInfo

const Default_ReplyReplyTarger_Tag4 uint32 = 1
const Default_ReplyReplyTarger_Tag6 uint64 = 1

func (m *ReplyReplyTarger) GetMsgSeq() uint32 {
	if m != nil && m.MsgSeq != nil {
		return *m.MsgSeq
	}
	return 0
}

func (m *ReplyReplyTarger) GetFromUin() uint64 {
	if m != nil && m.FromUin != nil {
		return *m.FromUin
	}
	return 0
}

func (m *ReplyReplyTarger) GetSendTime() uint64 {
	if m != nil && m.SendTime != nil {
		return *m.SendTime
	}
	return 0
}

func (m *ReplyReplyTarger) GetTag4() uint32 {
	if m != nil && m.Tag4 != nil {
		return *m.Tag4
	}
	return Default_ReplyReplyTarger_Tag4
}

func (m *ReplyReplyTarger) GetShowMsg() *ShowMsg {
	if m != nil {
		return m.ShowMsg
	}
	return nil
}

func (m *ReplyReplyTarger) GetTag6() uint64 {
	if m != nil && m.Tag6 != nil {
		return *m.Tag6
	}
	return Default_ReplyReplyTarger_Tag6
}

func (m *ReplyReplyTarger) GetGroupCode() uint64 {
	if m != nil && m.GroupCode != nil {
		return *m.GroupCode
	}
	return 0
}

type ShowMsg struct {
	Show                 *ShowMsg_Showed `protobuf:"bytes,1,req,name=show" json:"show,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ShowMsg) Reset()         { *m = ShowMsg{} }
func (m *ShowMsg) String() string { return proto.CompactTextString(m) }
func (*ShowMsg) ProtoMessage()    {}
func (*ShowMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b35eee2ab8c5dd8, []int{1}
}
func (m *ShowMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShowMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShowMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShowMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShowMsg.Merge(m, src)
}
func (m *ShowMsg) XXX_Size() int {
	return m.Size()
}
func (m *ShowMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_ShowMsg.DiscardUnknown(m)
}

var xxx_messageInfo_ShowMsg proto.InternalMessageInfo

func (m *ShowMsg) GetShow() *ShowMsg_Showed {
	if m != nil {
		return m.Show
	}
	return nil
}

type ShowMsg_Showed struct {
	Text                 *string  `protobuf:"bytes,1,req,name=text" json:"text,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ShowMsg_Showed) Reset()         { *m = ShowMsg_Showed{} }
func (m *ShowMsg_Showed) String() string { return proto.CompactTextString(m) }
func (*ShowMsg_Showed) ProtoMessage()    {}
func (*ShowMsg_Showed) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b35eee2ab8c5dd8, []int{1, 0}
}
func (m *ShowMsg_Showed) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShowMsg_Showed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShowMsg_Showed.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShowMsg_Showed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShowMsg_Showed.Merge(m, src)
}
func (m *ShowMsg_Showed) XXX_Size() int {
	return m.Size()
}
func (m *ShowMsg_Showed) XXX_DiscardUnknown() {
	xxx_messageInfo_ShowMsg_Showed.DiscardUnknown(m)
}

var xxx_messageInfo_ShowMsg_Showed proto.InternalMessageInfo

func (m *ShowMsg_Showed) GetText() string {
	if m != nil && m.Text != nil {
		return *m.Text
	}
	return ""
}

func init() {
	proto.RegisterType((*Reply)(nil), "cmd0x0002.reply")
	proto.RegisterType((*ReplyReplyTarger)(nil), "cmd0x0002.reply.replyTarger")
	proto.RegisterType((*ShowMsg)(nil), "cmd0x0002.ShowMsg")
	proto.RegisterType((*ShowMsg_Showed)(nil), "cmd0x0002.ShowMsg.Showed")
}

func init() { proto.RegisterFile("reply.proto", fileDescriptor_4b35eee2ab8c5dd8) }

var fileDescriptor_4b35eee2ab8c5dd8 = []byte{
	// 289 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x8f, 0x4f, 0x4b, 0xc3, 0x30,
	0x18, 0xc6, 0x4d, 0xcd, 0x3a, 0xf7, 0x96, 0x81, 0xbc, 0xa0, 0xc4, 0x31, 0x4a, 0xd8, 0x29, 0x07,
	0x37, 0x6a, 0x19, 0x3b, 0x78, 0x54, 0xd0, 0xd3, 0x2e, 0x69, 0xf5, 0x3e, 0x6c, 0xe8, 0x06, 0x76,
	0xa9, 0x69, 0x65, 0xf3, 0x83, 0x08, 0x7e, 0x24, 0x8f, 0x5e, 0xbc, 0x4b, 0xfd, 0x22, 0x42, 0xfa,
	0x47, 0xc1, 0x4b, 0x9b, 0xe7, 0x7d, 0x7e, 0xef, 0xf3, 0x24, 0xe0, 0x19, 0x95, 0x3f, 0xbe, 0xcc,
	0x72, 0xa3, 0x4b, 0x8d, 0x83, 0x87, 0x2c, 0x09, 0xf6, 0x41, 0x10, 0x84, 0x93, 0x57, 0x07, 0x7a,
	0xd6, 0xc2, 0x39, 0xb8, 0xe5, 0xca, 0xa4, 0xca, 0xb0, 0x29, 0x77, 0x84, 0x17, 0x8e, 0x67, 0x1d,
	0x35, 0xab, 0x97, 0xed, 0x37, 0xb6, 0x8c, 0x6c, 0xd8, 0xd1, 0x27, 0x69, 0xa2, 0xeb, 0x39, 0x9e,
	0x82, 0xbb, 0x2c, 0xd2, 0x48, 0x3d, 0x31, 0xc2, 0x1d, 0x31, 0x94, 0x8d, 0x42, 0x06, 0xfd, 0x1b,
	0xa3, 0xb3, 0xbb, 0xcd, 0x96, 0x39, 0xdc, 0x11, 0x54, 0xb6, 0x12, 0x47, 0x70, 0x14, 0xa9, 0x6d,
	0x12, 0x6f, 0x32, 0xc5, 0x0e, 0xad, 0xd5, 0x69, 0x3c, 0x01, 0x1a, 0xaf, 0xd2, 0x39, 0xa3, 0x9c,
	0x88, 0xe1, 0x25, 0xb9, 0x90, 0x56, 0xe2, 0x39, 0xf4, 0xa3, 0xb5, 0xde, 0x2d, 0x8b, 0x94, 0xf5,
	0x38, 0x11, 0x5e, 0x88, 0x7f, 0xee, 0xda, 0x38, 0xb2, 0x45, 0x9a, 0x90, 0x05, 0x73, 0x39, 0x11,
	0xb4, 0x0d, 0x59, 0xe0, 0x18, 0x06, 0xb7, 0x46, 0x3f, 0xe7, 0xd7, 0x3a, 0x51, 0x0c, 0x6c, 0xf1,
	0xef, 0x60, 0x72, 0xdf, 0x55, 0xe0, 0x14, 0x68, 0xb1, 0xd6, 0x3b, 0xfb, 0x20, 0x2f, 0x3c, 0xfb,
	0x5f, 0x65, 0xff, 0x2a, 0x91, 0x16, 0x1b, 0x8d, 0xc1, 0xad, 0x35, 0x22, 0xd0, 0x52, 0xed, 0x4b,
	0xbb, 0x38, 0x90, 0xf6, 0x7c, 0x75, 0xfc, 0x5e, 0xf9, 0xe4, 0xa3, 0xf2, 0xc9, 0x57, 0xe5, 0x93,
	0xb7, 0x6f, 0xff, 0xe0, 0x27, 0x00, 0x00, 0xff, 0xff, 0x93, 0x19, 0x55, 0x15, 0x9a, 0x01, 0x00,
	0x00,
}

func (m *Reply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Reply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Reply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Targer == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		{
			size, err := m.Targer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintReply(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xea
	}
	return len(dAtA) - i, nil
}

func (m *ReplyReplyTarger) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyReplyTarger) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplyReplyTarger) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.GroupCode == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		i = encodeVarintReply(dAtA, i, uint64(*m.GroupCode))
		i--
		dAtA[i] = 0x50
	}
	if m.Tag6 != nil {
		i = encodeVarintReply(dAtA, i, uint64(*m.Tag6))
		i--
		dAtA[i] = 0x30
	}
	if m.ShowMsg != nil {
		{
			size, err := m.ShowMsg.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintReply(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Tag4 != nil {
		i = encodeVarintReply(dAtA, i, uint64(*m.Tag4))
		i--
		dAtA[i] = 0x20
	}
	if m.SendTime == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		i = encodeVarintReply(dAtA, i, uint64(*m.SendTime))
		i--
		dAtA[i] = 0x18
	}
	if m.FromUin == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		i = encodeVarintReply(dAtA, i, uint64(*m.FromUin))
		i--
		dAtA[i] = 0x10
	}
	if m.MsgSeq == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		i = encodeVarintReply(dAtA, i, uint64(*m.MsgSeq))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ShowMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShowMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShowMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Show == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		{
			size, err := m.Show.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintReply(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ShowMsg_Showed) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShowMsg_Showed) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShowMsg_Showed) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Text == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		i -= len(*m.Text)
		copy(dAtA[i:], *m.Text)
		i = encodeVarintReply(dAtA, i, uint64(len(*m.Text)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintReply(dAtA []byte, offset int, v uint64) int {
	offset -= sovReply(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Reply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Targer != nil {
		l = m.Targer.Size()
		n += 2 + l + sovReply(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReplyReplyTarger) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MsgSeq != nil {
		n += 1 + sovReply(uint64(*m.MsgSeq))
	}
	if m.FromUin != nil {
		n += 1 + sovReply(uint64(*m.FromUin))
	}
	if m.SendTime != nil {
		n += 1 + sovReply(uint64(*m.SendTime))
	}
	if m.Tag4 != nil {
		n += 1 + sovReply(uint64(*m.Tag4))
	}
	if m.ShowMsg != nil {
		l = m.ShowMsg.Size()
		n += 1 + l + sovReply(uint64(l))
	}
	if m.Tag6 != nil {
		n += 1 + sovReply(uint64(*m.Tag6))
	}
	if m.GroupCode != nil {
		n += 1 + sovReply(uint64(*m.GroupCode))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ShowMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Show != nil {
		l = m.Show.Size()
		n += 1 + l + sovReply(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ShowMsg_Showed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Text != nil {
		l = len(*m.Text)
		n += 1 + l + sovReply(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovReply(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozReply(x uint64) (n int) {
	return sovReply(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Reply) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReply
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: reply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: reply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 45:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Targer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReply
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReply
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Targer == nil {
				m.Targer = &ReplyReplyTarger{}
			}
			if err := m.Targer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipReply(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReply
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyReplyTarger) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReply
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: replyTarger: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: replyTarger: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgSeq", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MsgSeq = &v
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromUin", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FromUin = &v
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SendTime = &v
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tag4", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Tag4 = &v
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShowMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReply
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReply
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ShowMsg == nil {
				m.ShowMsg = &ShowMsg{}
			}
			if err := m.ShowMsg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tag6", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Tag6 = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupCode", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GroupCode = &v
			hasFields[0] |= uint64(0x00000008)
		default:
			iNdEx = preIndex
			skippy, err := skipReply(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReply
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShowMsg) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReply
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShowMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShowMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Show", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReply
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReply
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Show == nil {
				m.Show = &ShowMsg_Showed{}
			}
			if err := m.Show.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipReply(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReply
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShowMsg_Showed) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReply
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Showed: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Showed: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReply
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReply
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Text = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipReply(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReply
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipReply(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowReply
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowReply
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowReply
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthReply
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupReply
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthReply
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthReply        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowReply          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupReply = fmt.Errorf("proto: unexpected end of group")
)
